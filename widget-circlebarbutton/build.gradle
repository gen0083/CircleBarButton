apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

group = 'jp.gcreate'
version = '0.1'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 23
        versionCode 1
        versionName version
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.1'
}


def siteUrl = 'https://github.com/gen0083/CircleBarButton'
def gitUrl = 'https://github.com/gen0083/CircleBarButton.git'

bintray {
    user = bintray_user
    key = bintray_api_key

    configurations = ['archives'] //When uploading configuration files
    pkg {
        repo = 'maven'
        name = project.name
        desc = 'This is a Button that has circle bar around it'
        websiteUrl = siteUrl
        issueTrackerUrl = 'https://github.com/gen0083/CircleBarButton/issues'
        vcsUrl = gitUrl
        licenses = ['Apache-2.0']
        labels = ['aar', 'android', 'widget']
        publicDownloadNumbers = true
    }
}

install {
    repositories.mavenInstaller.pom.project {
        packaging 'aar'
        name 'widget-circlebarbutton'
        url siteUrl
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }
        developers {
            developer {
                id 'gen0083'
                name 'G-CREATE'
                email 'archiherewego@gmail.com'
            }
        }
        scm {
            connection gitUrl
            developerConnection gitUrl
            url siteUrl

        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}